import ExpressServer from './express/server'
import config from '../config'
import path from 'path'
import loggerFactory from './logger'

const logger = loggerFactory.getLogger()

/**
 *  Loads file asynchrously and repeatedly if failing.
 *
 *  @param {string} filepath
 *  @param {number} [retry=0]
 *  return {Promise} resolves with file required, rejects with retrying too many times
 */
function readWebpackGeneratedFiles(filepath, retry = 0) {
  const maxRetry = 10
  return new Promise((resolve, reject) => {
    try {
      const file = require(filepath)
      resolve(file)
    } catch (err) {
      if (retry < maxRetry) {
        return setTimeout(() => {
          readWebpackGeneratedFiles(filepath, retry + 1)
            .then(resolve)
            .catch(reject)
        }, 5000) // rest 5 secs
      }
      return reject(new Error(`Can not load  ${filepath}`))
    }
    logger.info('load ' + filepath)
  })
}

const host = config.host || 'localhost'
const port = config.port || 3000

/**
 *  Loads webpack generated files, which are
 *  `webpack-assets.json`
 *  `loadable-stats.json`
 *
 *  `webpack-assets.json` is generated by `BundleListPlugin` defined in `./webpack.config.js`.
 *  `loadable-stats.json` is generated by `ReactLoadablePlugin` of `@loadable/webpack-plugin`.
 *  These two files are used for server side rendering.
 */
Promise.all([
  readWebpackGeneratedFiles(path.resolve(__dirname, '../webpack-assets.json')),
  readWebpackGeneratedFiles(path.resolve(__dirname, '../loadable-stats.json')),
])
  .then(files => {
    const server = new ExpressServer()
    const options = {
      nodeEnv: config.nodeEnv,
      releaseBranch: config.releaseBranch,
      cookieSecret: config.cookieSecret,
    }
    server.setup(files[0], files[1], options).then(() => {
      server.run(host, port)
    })
  })
  .catch(err => {
    logger.errorReport({
      message: 'Set up twreporter-react server failure.',
      report: err,
    })
  })
