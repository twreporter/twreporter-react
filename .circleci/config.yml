# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: cimg/node:18.17.1
    working_directory: ~/repo
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-build-{{ checksum "yarn.lock" }}

      - run: yarn install --frozen-lockfile

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-build-{{ checksum "yarn.lock" }}

      - run:
          name: Specify release branch
          command: |
            make build RELEASE_BRANCH=${CIRCLE_BRANCH}

      - run: rm -rf node_modules

      # Download and cache dependencies for running
      - restore_cache:
          keys:
            - v1-dependencies-runtime-{{ checksum "yarn.lock" }}

      - run: yarn install --production --frozen-lockfile

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-runtime-{{ checksum "yarn.lock" }}

      - run:
          name: Save pkg version to a file
          command: node -pe "require('./package.json').version" > .pkg-version

      - persist_to_workspace:
          root: ~/repo
          paths:
            - ./*
  deploy:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/repo
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: .
      - run:
          name: Setup custom environment variables
          command: |
            APP="twreporter-website-v2"
            CLUSTER_NAME=${K8S_CLUSTER_NAME}
            CLUSTER_NAMESPACE="default"
            DEPLOYMENT="twreporter-website-v2"
            ENVIRONMENT=""
            PKG_VER="$(cat .pkg-version)-$CIRCLE_BUILD_NUM"

            if [ "${CIRCLE_BRANCH}" == "preview" ]; then
              CLUSTER_NAME=${K8S_PREVIEW_CLUSTER_NAME}
            fi

            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
              CLUSTER_NAMESPACE="staging"
              ENVIRONMENT="staging"
            fi

            if [ "${CIRCLE_BRANCH}" == "dev" ]; then
              CLUSTER_NAMESPACE="dev"
              ENVIRONMENT="dev"
            fi

            if [ "${CIRCLE_BRANCH}" == "next" ]; then
              CLUSTER_NAMESPACE="production"
              ENVIRONMENT="next"
            fi

            if [ "${CIRCLE_BRANCH}" == "release" ]; then
              PKG_VER="$(cat .pkg-version)"
              CLUSTER_NAMESPACE="production"
              ENVIRONMENT="release"
            fi

            echo "export APP=${APP}" >> $BASH_ENV
            echo "export DEPLOYMENT=${DEPLOYMENT}" >> $BASH_ENV
            echo "export CLUSTER_NAME=${CLUSTER_NAME}" >> $BASH_ENV
            echo "export CLUSTER_NAMESPACE=${CLUSTER_NAMESPACE}" >> $BASH_ENV
            echo "export ENVIRONMENT=${ENVIRONMENT}" >> $BASH_ENV
            echo "export PKG_VER=${PKG_VER}" >> $BASH_ENV
            echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $BASH_ENV

      - run:
          name: Connect to container cluster
          command: |
            # GOOGLE_AUTH, GOOGLE_PROJECT_ID,
            # K8S_PREVIEW_CLUSTER_NAME,
            # and K8S_CLUSTER_NAME is defined in context of circleci organization
            echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}

            if [ "${CIRCLE_BRANCH}" == "staging" ] || [ "${CIRCLE_BRANCH}" == "dev" ] || [ "${CIRCLE_BRANCH}" == "next" ] || [ "${CIRCLE_BRANCH}" == "release" ]; then
              gcloud --quiet container clusters get-credentials $CLUSTER_NAME --region=asia-east1
            fi

            if [ "${CIRCLE_BRANCH}" == "preview" ]; then
              # TODO
              # After new cluster settle down,
              # change asia-east1-a -> asia-east1
              # change ${K8S_PREVIEW_CLUSTER_NAME} -> ${K8S_CLUSTER_NAME}
              gcloud --quiet container clusters get-credentials $CLUSTER_NAME --zone=asia-east1-a
            fi

      - run:
          name: Build and push Docker image
          command: |
            docker build -t gcr.io/${GOOGLE_PROJECT_ID}/${APP}:$CIRCLE_BRANCH-$PKG_VER --build-arg NODE_ENV=production --build-arg RELEASE_BRANCH=${CIRCLE_BRANCH} --build-arg PKG_VERSION=${PKG_VER} .
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
            docker push gcr.io/${GOOGLE_PROJECT_ID}/${APP}:$CIRCLE_BRANCH-$PKG_VER

      - run:
          name: Fetch Kubernetes config source
          command: |
            gcloud source repos clone ${K8S_CONFIG_REPO}

      - run:
          name: Install kustomize binaries
          command: |
            curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
            mv ./kustomize /usr/local/bin/

      - run:
          name: Prepare for kubernetes config build
          command: |
            # With kubernetes config build or not
            if [ ! -z "${ENVIRONMENT}" ]; then
              cd "${K8S_CONFIG_REPO}/${APP}/overlays/${ENVIRONMENT}"
              kustomize edit set image "gcr.io/${GOOGLE_PROJECT_ID}/${APP}:${CIRCLE_BRANCH}-${PKG_VER}"
            fi
      - run:
          name: Deploy to Google Kubernetes Engine
          command: |

            # With kubernetes configs to deploy or not
            if [ ! -z "${ENVIRONMENT}" ]
            then
              kustomize build "${K8S_CONFIG_REPO}/${APP}/overlays/${ENVIRONMENT}" | kubectl apply -f -
            else
              kubectl set image deployment/${DEPLOYMENT} ${APP}=gcr.io/${GOOGLE_PROJECT_ID}/${APP}:$CIRCLE_BRANCH-$PKG_VER -n $CLUSTER_NAMESPACE
            fi
            kubectl rollout status deployment/${DEPLOYMENT} -n $CLUSTER_NAMESPACE

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - release
                - staging
                - preview
                - next
                - dev
      - deploy:
          context: twreporter-gcp
          requires:
            - build
          filters:
            branches:
              only:
                - release
                - staging
                - preview
                - next
                - dev
